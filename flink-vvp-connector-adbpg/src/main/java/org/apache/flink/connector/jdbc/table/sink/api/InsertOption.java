// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: adbpgss.proto

package org.apache.flink.connector.jdbc.table.sink.api;

/**
 * <pre>
 * Required parameters of the Insert operation
 * </pre>
 *
 * Protobuf type {@code api.InsertOption}
 */
public final class InsertOption extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:api.InsertOption)
    InsertOptionOrBuilder {
private static final long serialVersionUID = 0L;
  // Use InsertOption.newBuilder() to construct.
  private InsertOption(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private InsertOption() {
    insertColumns_ = com.google.protobuf.LazyStringArrayList.EMPTY;
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new InsertOption();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return org.apache.flink.connector.jdbc.table.sink.api.Adbpgss.internal_static_api_InsertOption_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return org.apache.flink.connector.jdbc.table.sink.api.Adbpgss.internal_static_api_InsertOption_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            org.apache.flink.connector.jdbc.table.sink.api.InsertOption.class, org.apache.flink.connector.jdbc.table.sink.api.InsertOption.Builder.class);
  }

  public static final int INSERTCOLUMNS_FIELD_NUMBER = 1;
  @SuppressWarnings("serial")
  private com.google.protobuf.LazyStringList insertColumns_;
  /**
   * <pre>
   * Names of the target table columns the insert operation should update; used in 'INSERT INTO', useful for partial loading
   * </pre>
   *
   * <code>repeated string InsertColumns = 1;</code>
   * @return A list containing the insertColumns.
   */
  public com.google.protobuf.ProtocolStringList
      getInsertColumnsList() {
    return insertColumns_;
  }
  /**
   * <pre>
   * Names of the target table columns the insert operation should update; used in 'INSERT INTO', useful for partial loading
   * </pre>
   *
   * <code>repeated string InsertColumns = 1;</code>
   * @return The count of insertColumns.
   */
  public int getInsertColumnsCount() {
    return insertColumns_.size();
  }
  /**
   * <pre>
   * Names of the target table columns the insert operation should update; used in 'INSERT INTO', useful for partial loading
   * </pre>
   *
   * <code>repeated string InsertColumns = 1;</code>
   * @param index The index of the element to return.
   * @return The insertColumns at the given index.
   */
  public java.lang.String getInsertColumns(int index) {
    return insertColumns_.get(index);
  }
  /**
   * <pre>
   * Names of the target table columns the insert operation should update; used in 'INSERT INTO', useful for partial loading
   * </pre>
   *
   * <code>repeated string InsertColumns = 1;</code>
   * @param index The index of the value to return.
   * @return The bytes of the insertColumns at the given index.
   */
  public com.google.protobuf.ByteString
      getInsertColumnsBytes(int index) {
    return insertColumns_.getByteString(index);
  }

  public static final int TRUNCATETABLE_FIELD_NUMBER = 2;
  private boolean truncateTable_ = false;
  /**
   * <pre>
   * Truncate table before loading?
   * </pre>
   *
   * <code>bool TruncateTable = 2;</code>
   * @return The truncateTable.
   */
  @java.lang.Override
  public boolean getTruncateTable() {
    return truncateTable_;
  }

  public static final int ERRORLIMITCOUNT_FIELD_NUMBER = 4;
  private long errorLimitCount_ = 0L;
  /**
   * <pre>
   * Error limit count; used by external table
   * </pre>
   *
   * <code>int64 ErrorLimitCount = 4;</code>
   * @return The errorLimitCount.
   */
  @java.lang.Override
  public long getErrorLimitCount() {
    return errorLimitCount_;
  }

  public static final int ERRORLIMITPERCENTAGE_FIELD_NUMBER = 5;
  private int errorLimitPercentage_ = 0;
  /**
   * <pre>
   * Error limit percentage; used by external table
   * </pre>
   *
   * <code>int32 ErrorLimitPercentage = 5;</code>
   * @return The errorLimitPercentage.
   */
  @java.lang.Override
  public int getErrorLimitPercentage() {
    return errorLimitPercentage_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    for (int i = 0; i < insertColumns_.size(); i++) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, insertColumns_.getRaw(i));
    }
    if (truncateTable_ != false) {
      output.writeBool(2, truncateTable_);
    }
    if (errorLimitCount_ != 0L) {
      output.writeInt64(4, errorLimitCount_);
    }
    if (errorLimitPercentage_ != 0) {
      output.writeInt32(5, errorLimitPercentage_);
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    {
      int dataSize = 0;
      for (int i = 0; i < insertColumns_.size(); i++) {
        dataSize += computeStringSizeNoTag(insertColumns_.getRaw(i));
      }
      size += dataSize;
      size += 1 * getInsertColumnsList().size();
    }
    if (truncateTable_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(2, truncateTable_);
    }
    if (errorLimitCount_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(4, errorLimitCount_);
    }
    if (errorLimitPercentage_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(5, errorLimitPercentage_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof org.apache.flink.connector.jdbc.table.sink.api.InsertOption)) {
      return super.equals(obj);
    }
    org.apache.flink.connector.jdbc.table.sink.api.InsertOption other = (org.apache.flink.connector.jdbc.table.sink.api.InsertOption) obj;

    if (!getInsertColumnsList()
        .equals(other.getInsertColumnsList())) return false;
    if (getTruncateTable()
        != other.getTruncateTable()) return false;
    if (getErrorLimitCount()
        != other.getErrorLimitCount()) return false;
    if (getErrorLimitPercentage()
        != other.getErrorLimitPercentage()) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (getInsertColumnsCount() > 0) {
      hash = (37 * hash) + INSERTCOLUMNS_FIELD_NUMBER;
      hash = (53 * hash) + getInsertColumnsList().hashCode();
    }
    hash = (37 * hash) + TRUNCATETABLE_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getTruncateTable());
    hash = (37 * hash) + ERRORLIMITCOUNT_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getErrorLimitCount());
    hash = (37 * hash) + ERRORLIMITPERCENTAGE_FIELD_NUMBER;
    hash = (53 * hash) + getErrorLimitPercentage();
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static org.apache.flink.connector.jdbc.table.sink.api.InsertOption parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.apache.flink.connector.jdbc.table.sink.api.InsertOption parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.apache.flink.connector.jdbc.table.sink.api.InsertOption parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.apache.flink.connector.jdbc.table.sink.api.InsertOption parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.apache.flink.connector.jdbc.table.sink.api.InsertOption parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.apache.flink.connector.jdbc.table.sink.api.InsertOption parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.apache.flink.connector.jdbc.table.sink.api.InsertOption parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static org.apache.flink.connector.jdbc.table.sink.api.InsertOption parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static org.apache.flink.connector.jdbc.table.sink.api.InsertOption parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static org.apache.flink.connector.jdbc.table.sink.api.InsertOption parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static org.apache.flink.connector.jdbc.table.sink.api.InsertOption parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static org.apache.flink.connector.jdbc.table.sink.api.InsertOption parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(org.apache.flink.connector.jdbc.table.sink.api.InsertOption prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Required parameters of the Insert operation
   * </pre>
   *
   * Protobuf type {@code api.InsertOption}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:api.InsertOption)
      org.apache.flink.connector.jdbc.table.sink.api.InsertOptionOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.flink.connector.jdbc.table.sink.api.Adbpgss.internal_static_api_InsertOption_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.flink.connector.jdbc.table.sink.api.Adbpgss.internal_static_api_InsertOption_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.flink.connector.jdbc.table.sink.api.InsertOption.class, org.apache.flink.connector.jdbc.table.sink.api.InsertOption.Builder.class);
    }

    // Construct using org.apache.flink.connector.jdbc.table.sink.api.InsertOption.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      insertColumns_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000001);
      truncateTable_ = false;
      errorLimitCount_ = 0L;
      errorLimitPercentage_ = 0;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return org.apache.flink.connector.jdbc.table.sink.api.Adbpgss.internal_static_api_InsertOption_descriptor;
    }

    @java.lang.Override
    public org.apache.flink.connector.jdbc.table.sink.api.InsertOption getDefaultInstanceForType() {
      return org.apache.flink.connector.jdbc.table.sink.api.InsertOption.getDefaultInstance();
    }

    @java.lang.Override
    public org.apache.flink.connector.jdbc.table.sink.api.InsertOption build() {
      org.apache.flink.connector.jdbc.table.sink.api.InsertOption result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public org.apache.flink.connector.jdbc.table.sink.api.InsertOption buildPartial() {
      org.apache.flink.connector.jdbc.table.sink.api.InsertOption result = new org.apache.flink.connector.jdbc.table.sink.api.InsertOption(this);
      buildPartialRepeatedFields(result);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartialRepeatedFields(org.apache.flink.connector.jdbc.table.sink.api.InsertOption result) {
      if (((bitField0_ & 0x00000001) != 0)) {
        insertColumns_ = insertColumns_.getUnmodifiableView();
        bitField0_ = (bitField0_ & ~0x00000001);
      }
      result.insertColumns_ = insertColumns_;
    }

    private void buildPartial0(org.apache.flink.connector.jdbc.table.sink.api.InsertOption result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.truncateTable_ = truncateTable_;
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.errorLimitCount_ = errorLimitCount_;
      }
      if (((from_bitField0_ & 0x00000008) != 0)) {
        result.errorLimitPercentage_ = errorLimitPercentage_;
      }
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof org.apache.flink.connector.jdbc.table.sink.api.InsertOption) {
        return mergeFrom((org.apache.flink.connector.jdbc.table.sink.api.InsertOption)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(org.apache.flink.connector.jdbc.table.sink.api.InsertOption other) {
      if (other == org.apache.flink.connector.jdbc.table.sink.api.InsertOption.getDefaultInstance()) return this;
      if (!other.insertColumns_.isEmpty()) {
        if (insertColumns_.isEmpty()) {
          insertColumns_ = other.insertColumns_;
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          ensureInsertColumnsIsMutable();
          insertColumns_.addAll(other.insertColumns_);
        }
        onChanged();
      }
      if (other.getTruncateTable() != false) {
        setTruncateTable(other.getTruncateTable());
      }
      if (other.getErrorLimitCount() != 0L) {
        setErrorLimitCount(other.getErrorLimitCount());
      }
      if (other.getErrorLimitPercentage() != 0) {
        setErrorLimitPercentage(other.getErrorLimitPercentage());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();
              ensureInsertColumnsIsMutable();
              insertColumns_.add(s);
              break;
            } // case 10
            case 16: {
              truncateTable_ = input.readBool();
              bitField0_ |= 0x00000002;
              break;
            } // case 16
            case 32: {
              errorLimitCount_ = input.readInt64();
              bitField0_ |= 0x00000004;
              break;
            } // case 32
            case 40: {
              errorLimitPercentage_ = input.readInt32();
              bitField0_ |= 0x00000008;
              break;
            } // case 40
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private com.google.protobuf.LazyStringList insertColumns_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    private void ensureInsertColumnsIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        insertColumns_ = new com.google.protobuf.LazyStringArrayList(insertColumns_);
        bitField0_ |= 0x00000001;
       }
    }
    /**
     * <pre>
     * Names of the target table columns the insert operation should update; used in 'INSERT INTO', useful for partial loading
     * </pre>
     *
     * <code>repeated string InsertColumns = 1;</code>
     * @return A list containing the insertColumns.
     */
    public com.google.protobuf.ProtocolStringList
        getInsertColumnsList() {
      return insertColumns_.getUnmodifiableView();
    }
    /**
     * <pre>
     * Names of the target table columns the insert operation should update; used in 'INSERT INTO', useful for partial loading
     * </pre>
     *
     * <code>repeated string InsertColumns = 1;</code>
     * @return The count of insertColumns.
     */
    public int getInsertColumnsCount() {
      return insertColumns_.size();
    }
    /**
     * <pre>
     * Names of the target table columns the insert operation should update; used in 'INSERT INTO', useful for partial loading
     * </pre>
     *
     * <code>repeated string InsertColumns = 1;</code>
     * @param index The index of the element to return.
     * @return The insertColumns at the given index.
     */
    public java.lang.String getInsertColumns(int index) {
      return insertColumns_.get(index);
    }
    /**
     * <pre>
     * Names of the target table columns the insert operation should update; used in 'INSERT INTO', useful for partial loading
     * </pre>
     *
     * <code>repeated string InsertColumns = 1;</code>
     * @param index The index of the value to return.
     * @return The bytes of the insertColumns at the given index.
     */
    public com.google.protobuf.ByteString
        getInsertColumnsBytes(int index) {
      return insertColumns_.getByteString(index);
    }
    /**
     * <pre>
     * Names of the target table columns the insert operation should update; used in 'INSERT INTO', useful for partial loading
     * </pre>
     *
     * <code>repeated string InsertColumns = 1;</code>
     * @param index The index to set the value at.
     * @param value The insertColumns to set.
     * @return This builder for chaining.
     */
    public Builder setInsertColumns(
        int index, java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      ensureInsertColumnsIsMutable();
      insertColumns_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Names of the target table columns the insert operation should update; used in 'INSERT INTO', useful for partial loading
     * </pre>
     *
     * <code>repeated string InsertColumns = 1;</code>
     * @param value The insertColumns to add.
     * @return This builder for chaining.
     */
    public Builder addInsertColumns(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      ensureInsertColumnsIsMutable();
      insertColumns_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Names of the target table columns the insert operation should update; used in 'INSERT INTO', useful for partial loading
     * </pre>
     *
     * <code>repeated string InsertColumns = 1;</code>
     * @param values The insertColumns to add.
     * @return This builder for chaining.
     */
    public Builder addAllInsertColumns(
        java.lang.Iterable<java.lang.String> values) {
      ensureInsertColumnsIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, insertColumns_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Names of the target table columns the insert operation should update; used in 'INSERT INTO', useful for partial loading
     * </pre>
     *
     * <code>repeated string InsertColumns = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearInsertColumns() {
      insertColumns_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000001);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Names of the target table columns the insert operation should update; used in 'INSERT INTO', useful for partial loading
     * </pre>
     *
     * <code>repeated string InsertColumns = 1;</code>
     * @param value The bytes of the insertColumns to add.
     * @return This builder for chaining.
     */
    public Builder addInsertColumnsBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      ensureInsertColumnsIsMutable();
      insertColumns_.add(value);
      onChanged();
      return this;
    }

    private boolean truncateTable_ ;
    /**
     * <pre>
     * Truncate table before loading?
     * </pre>
     *
     * <code>bool TruncateTable = 2;</code>
     * @return The truncateTable.
     */
    @java.lang.Override
    public boolean getTruncateTable() {
      return truncateTable_;
    }
    /**
     * <pre>
     * Truncate table before loading?
     * </pre>
     *
     * <code>bool TruncateTable = 2;</code>
     * @param value The truncateTable to set.
     * @return This builder for chaining.
     */
    public Builder setTruncateTable(boolean value) {
      
      truncateTable_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Truncate table before loading?
     * </pre>
     *
     * <code>bool TruncateTable = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearTruncateTable() {
      bitField0_ = (bitField0_ & ~0x00000002);
      truncateTable_ = false;
      onChanged();
      return this;
    }

    private long errorLimitCount_ ;
    /**
     * <pre>
     * Error limit count; used by external table
     * </pre>
     *
     * <code>int64 ErrorLimitCount = 4;</code>
     * @return The errorLimitCount.
     */
    @java.lang.Override
    public long getErrorLimitCount() {
      return errorLimitCount_;
    }
    /**
     * <pre>
     * Error limit count; used by external table
     * </pre>
     *
     * <code>int64 ErrorLimitCount = 4;</code>
     * @param value The errorLimitCount to set.
     * @return This builder for chaining.
     */
    public Builder setErrorLimitCount(long value) {
      
      errorLimitCount_ = value;
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Error limit count; used by external table
     * </pre>
     *
     * <code>int64 ErrorLimitCount = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearErrorLimitCount() {
      bitField0_ = (bitField0_ & ~0x00000004);
      errorLimitCount_ = 0L;
      onChanged();
      return this;
    }

    private int errorLimitPercentage_ ;
    /**
     * <pre>
     * Error limit percentage; used by external table
     * </pre>
     *
     * <code>int32 ErrorLimitPercentage = 5;</code>
     * @return The errorLimitPercentage.
     */
    @java.lang.Override
    public int getErrorLimitPercentage() {
      return errorLimitPercentage_;
    }
    /**
     * <pre>
     * Error limit percentage; used by external table
     * </pre>
     *
     * <code>int32 ErrorLimitPercentage = 5;</code>
     * @param value The errorLimitPercentage to set.
     * @return This builder for chaining.
     */
    public Builder setErrorLimitPercentage(int value) {
      
      errorLimitPercentage_ = value;
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Error limit percentage; used by external table
     * </pre>
     *
     * <code>int32 ErrorLimitPercentage = 5;</code>
     * @return This builder for chaining.
     */
    public Builder clearErrorLimitPercentage() {
      bitField0_ = (bitField0_ & ~0x00000008);
      errorLimitPercentage_ = 0;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:api.InsertOption)
  }

  // @@protoc_insertion_point(class_scope:api.InsertOption)
  private static final org.apache.flink.connector.jdbc.table.sink.api.InsertOption DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new org.apache.flink.connector.jdbc.table.sink.api.InsertOption();
  }

  public static org.apache.flink.connector.jdbc.table.sink.api.InsertOption getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<InsertOption>
      PARSER = new com.google.protobuf.AbstractParser<InsertOption>() {
    @java.lang.Override
    public InsertOption parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<InsertOption> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<InsertOption> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public org.apache.flink.connector.jdbc.table.sink.api.InsertOption getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

