// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gpss.proto

package org.apache.flink.connector.jdbc.table.sink.api;

public interface InsertOptionOrBuilder extends
    // @@protoc_insertion_point(interface_extends:api.InsertOption)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Names of the target table columns the insert operation should update; used in 'INSERT INTO', useful for partial loading
   * </pre>
   *
   * <code>repeated string InsertColumns = 1;</code>
   * @return A list containing the insertColumns.
   */
  java.util.List<String>
      getInsertColumnsList();
  /**
   * <pre>
   * Names of the target table columns the insert operation should update; used in 'INSERT INTO', useful for partial loading
   * </pre>
   *
   * <code>repeated string InsertColumns = 1;</code>
   * @return The count of insertColumns.
   */
  int getInsertColumnsCount();
  /**
   * <pre>
   * Names of the target table columns the insert operation should update; used in 'INSERT INTO', useful for partial loading
   * </pre>
   *
   * <code>repeated string InsertColumns = 1;</code>
   * @param index The index of the element to return.
   * @return The insertColumns at the given index.
   */
  String getInsertColumns(int index);
  /**
   * <pre>
   * Names of the target table columns the insert operation should update; used in 'INSERT INTO', useful for partial loading
   * </pre>
   *
   * <code>repeated string InsertColumns = 1;</code>
   * @param index The index of the value to return.
   * @return The bytes of the insertColumns at the given index.
   */
  com.google.protobuf.ByteString
      getInsertColumnsBytes(int index);

  /**
   * <pre>
   * Truncate table before loading?
   * </pre>
   *
   * <code>bool TruncateTable = 2;</code>
   * @return The truncateTable.
   */
  boolean getTruncateTable();

  /**
   * <pre>
   * Error limit count; used by external table
   * </pre>
   *
   * <code>int64 ErrorLimitCount = 4;</code>
   * @return The errorLimitCount.
   */
  long getErrorLimitCount();

  /**
   * <pre>
   * Error limit percentage; used by external table
   * </pre>
   *
   * <code>int32 ErrorLimitPercentage = 5;</code>
   * @return The errorLimitPercentage.
   */
  int getErrorLimitPercentage();
}
