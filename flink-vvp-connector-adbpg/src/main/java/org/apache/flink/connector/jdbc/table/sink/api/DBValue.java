// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: adbpgss.proto

package org.apache.flink.connector.jdbc.table.sink.api;

/**
 * Protobuf type {@code api.DBValue}
 */
public final class DBValue extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:api.DBValue)
    DBValueOrBuilder {
private static final long serialVersionUID = 0L;
  // Use DBValue.newBuilder() to construct.
  private DBValue(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private DBValue() {
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new DBValue();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return org.apache.flink.connector.jdbc.table.sink.api.Adbpgss.internal_static_api_DBValue_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return org.apache.flink.connector.jdbc.table.sink.api.Adbpgss.internal_static_api_DBValue_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            org.apache.flink.connector.jdbc.table.sink.api.DBValue.class, org.apache.flink.connector.jdbc.table.sink.api.DBValue.Builder.class);
  }

  private int dBTypeCase_ = 0;
  private java.lang.Object dBType_;
  public enum DBTypeCase
      implements com.google.protobuf.Internal.EnumLite,
          com.google.protobuf.AbstractMessage.InternalOneOfEnum {
    INT32VALUE(1),
    INT64VALUE(2),
    FLOAT32VALUE(5),
    FLOAT64VALUE(6),
    STRINGVALUE(7),
    BYTESVALUE(8),
    TIMESTAMPVALUE(10),
    NULLVALUE(11),
    DBTYPE_NOT_SET(0);
    private final int value;
    private DBTypeCase(int value) {
      this.value = value;
    }
    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static DBTypeCase valueOf(int value) {
      return forNumber(value);
    }

    public static DBTypeCase forNumber(int value) {
      switch (value) {
        case 1: return INT32VALUE;
        case 2: return INT64VALUE;
        case 5: return FLOAT32VALUE;
        case 6: return FLOAT64VALUE;
        case 7: return STRINGVALUE;
        case 8: return BYTESVALUE;
        case 10: return TIMESTAMPVALUE;
        case 11: return NULLVALUE;
        case 0: return DBTYPE_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  public DBTypeCase
  getDBTypeCase() {
    return DBTypeCase.forNumber(
        dBTypeCase_);
  }

  public static final int INT32VALUE_FIELD_NUMBER = 1;
  /**
   * <code>int32 Int32Value = 1;</code>
   * @return Whether the int32Value field is set.
   */
  @java.lang.Override
  public boolean hasInt32Value() {
    return dBTypeCase_ == 1;
  }
  /**
   * <code>int32 Int32Value = 1;</code>
   * @return The int32Value.
   */
  @java.lang.Override
  public int getInt32Value() {
    if (dBTypeCase_ == 1) {
      return (java.lang.Integer) dBType_;
    }
    return 0;
  }

  public static final int INT64VALUE_FIELD_NUMBER = 2;
  /**
   * <code>int64 Int64Value = 2;</code>
   * @return Whether the int64Value field is set.
   */
  @java.lang.Override
  public boolean hasInt64Value() {
    return dBTypeCase_ == 2;
  }
  /**
   * <code>int64 Int64Value = 2;</code>
   * @return The int64Value.
   */
  @java.lang.Override
  public long getInt64Value() {
    if (dBTypeCase_ == 2) {
      return (java.lang.Long) dBType_;
    }
    return 0L;
  }

  public static final int FLOAT32VALUE_FIELD_NUMBER = 5;
  /**
   * <code>float Float32Value = 5;</code>
   * @return Whether the float32Value field is set.
   */
  @java.lang.Override
  public boolean hasFloat32Value() {
    return dBTypeCase_ == 5;
  }
  /**
   * <code>float Float32Value = 5;</code>
   * @return The float32Value.
   */
  @java.lang.Override
  public float getFloat32Value() {
    if (dBTypeCase_ == 5) {
      return (java.lang.Float) dBType_;
    }
    return 0F;
  }

  public static final int FLOAT64VALUE_FIELD_NUMBER = 6;
  /**
   * <code>double Float64Value = 6;</code>
   * @return Whether the float64Value field is set.
   */
  @java.lang.Override
  public boolean hasFloat64Value() {
    return dBTypeCase_ == 6;
  }
  /**
   * <code>double Float64Value = 6;</code>
   * @return The float64Value.
   */
  @java.lang.Override
  public double getFloat64Value() {
    if (dBTypeCase_ == 6) {
      return (java.lang.Double) dBType_;
    }
    return 0D;
  }

  public static final int STRINGVALUE_FIELD_NUMBER = 7;
  /**
   * <pre>
   * Includes types whose values are presented as string but are not a real string type in Greenplum; for example: macaddr, time with time zone, box, etc.
   * </pre>
   *
   * <code>string StringValue = 7;</code>
   * @return Whether the stringValue field is set.
   */
  public boolean hasStringValue() {
    return dBTypeCase_ == 7;
  }
  /**
   * <pre>
   * Includes types whose values are presented as string but are not a real string type in Greenplum; for example: macaddr, time with time zone, box, etc.
   * </pre>
   *
   * <code>string StringValue = 7;</code>
   * @return The stringValue.
   */
  public java.lang.String getStringValue() {
    java.lang.Object ref = "";
    if (dBTypeCase_ == 7) {
      ref = dBType_;
    }
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      if (dBTypeCase_ == 7) {
        dBType_ = s;
      }
      return s;
    }
  }
  /**
   * <pre>
   * Includes types whose values are presented as string but are not a real string type in Greenplum; for example: macaddr, time with time zone, box, etc.
   * </pre>
   *
   * <code>string StringValue = 7;</code>
   * @return The bytes for stringValue.
   */
  public com.google.protobuf.ByteString
      getStringValueBytes() {
    java.lang.Object ref = "";
    if (dBTypeCase_ == 7) {
      ref = dBType_;
    }
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      if (dBTypeCase_ == 7) {
        dBType_ = b;
      }
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int BYTESVALUE_FIELD_NUMBER = 8;
  /**
   * <code>bytes BytesValue = 8;</code>
   * @return Whether the bytesValue field is set.
   */
  @java.lang.Override
  public boolean hasBytesValue() {
    return dBTypeCase_ == 8;
  }
  /**
   * <code>bytes BytesValue = 8;</code>
   * @return The bytesValue.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString getBytesValue() {
    if (dBTypeCase_ == 8) {
      return (com.google.protobuf.ByteString) dBType_;
    }
    return com.google.protobuf.ByteString.EMPTY;
  }

  public static final int TIMESTAMPVALUE_FIELD_NUMBER = 10;
  /**
   * <pre>
   * Time without timezone
   * </pre>
   *
   * <code>.google.protobuf.Timestamp TimeStampValue = 10;</code>
   * @return Whether the timeStampValue field is set.
   */
  @java.lang.Override
  public boolean hasTimeStampValue() {
    return dBTypeCase_ == 10;
  }
  /**
   * <pre>
   * Time without timezone
   * </pre>
   *
   * <code>.google.protobuf.Timestamp TimeStampValue = 10;</code>
   * @return The timeStampValue.
   */
  @java.lang.Override
  public com.google.protobuf.Timestamp getTimeStampValue() {
    if (dBTypeCase_ == 10) {
       return (com.google.protobuf.Timestamp) dBType_;
    }
    return com.google.protobuf.Timestamp.getDefaultInstance();
  }
  /**
   * <pre>
   * Time without timezone
   * </pre>
   *
   * <code>.google.protobuf.Timestamp TimeStampValue = 10;</code>
   */
  @java.lang.Override
  public com.google.protobuf.TimestampOrBuilder getTimeStampValueOrBuilder() {
    if (dBTypeCase_ == 10) {
       return (com.google.protobuf.Timestamp) dBType_;
    }
    return com.google.protobuf.Timestamp.getDefaultInstance();
  }

  public static final int NULLVALUE_FIELD_NUMBER = 11;
  /**
   * <code>.google.protobuf.NullValue NullValue = 11;</code>
   * @return Whether the nullValue field is set.
   */
  public boolean hasNullValue() {
    return dBTypeCase_ == 11;
  }
  /**
   * <code>.google.protobuf.NullValue NullValue = 11;</code>
   * @return The enum numeric value on the wire for nullValue.
   */
  public int getNullValueValue() {
    if (dBTypeCase_ == 11) {
      return (java.lang.Integer) dBType_;
    }
    return 0;
  }
  /**
   * <code>.google.protobuf.NullValue NullValue = 11;</code>
   * @return The nullValue.
   */
  public com.google.protobuf.NullValue getNullValue() {
    if (dBTypeCase_ == 11) {
      com.google.protobuf.NullValue result = com.google.protobuf.NullValue.forNumber(
          (java.lang.Integer) dBType_);
      return result == null ? com.google.protobuf.NullValue.UNRECOGNIZED : result;
    }
    return com.google.protobuf.NullValue.NULL_VALUE;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (dBTypeCase_ == 1) {
      output.writeInt32(
          1, (int)((java.lang.Integer) dBType_));
    }
    if (dBTypeCase_ == 2) {
      output.writeInt64(
          2, (long)((java.lang.Long) dBType_));
    }
    if (dBTypeCase_ == 5) {
      output.writeFloat(
          5, (float)((java.lang.Float) dBType_));
    }
    if (dBTypeCase_ == 6) {
      output.writeDouble(
          6, (double)((java.lang.Double) dBType_));
    }
    if (dBTypeCase_ == 7) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 7, dBType_);
    }
    if (dBTypeCase_ == 8) {
      output.writeBytes(
          8, (com.google.protobuf.ByteString) dBType_);
    }
    if (dBTypeCase_ == 10) {
      output.writeMessage(10, (com.google.protobuf.Timestamp) dBType_);
    }
    if (dBTypeCase_ == 11) {
      output.writeEnum(11, ((java.lang.Integer) dBType_));
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (dBTypeCase_ == 1) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(
            1, (int)((java.lang.Integer) dBType_));
    }
    if (dBTypeCase_ == 2) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(
            2, (long)((java.lang.Long) dBType_));
    }
    if (dBTypeCase_ == 5) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(
            5, (float)((java.lang.Float) dBType_));
    }
    if (dBTypeCase_ == 6) {
      size += com.google.protobuf.CodedOutputStream
        .computeDoubleSize(
            6, (double)((java.lang.Double) dBType_));
    }
    if (dBTypeCase_ == 7) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(7, dBType_);
    }
    if (dBTypeCase_ == 8) {
      size += com.google.protobuf.CodedOutputStream
        .computeBytesSize(
            8, (com.google.protobuf.ByteString) dBType_);
    }
    if (dBTypeCase_ == 10) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(10, (com.google.protobuf.Timestamp) dBType_);
    }
    if (dBTypeCase_ == 11) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(11, ((java.lang.Integer) dBType_));
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof org.apache.flink.connector.jdbc.table.sink.api.DBValue)) {
      return super.equals(obj);
    }
    org.apache.flink.connector.jdbc.table.sink.api.DBValue other = (org.apache.flink.connector.jdbc.table.sink.api.DBValue) obj;

    if (!getDBTypeCase().equals(other.getDBTypeCase())) return false;
    switch (dBTypeCase_) {
      case 1:
        if (getInt32Value()
            != other.getInt32Value()) return false;
        break;
      case 2:
        if (getInt64Value()
            != other.getInt64Value()) return false;
        break;
      case 5:
        if (java.lang.Float.floatToIntBits(getFloat32Value())
            != java.lang.Float.floatToIntBits(
                other.getFloat32Value())) return false;
        break;
      case 6:
        if (java.lang.Double.doubleToLongBits(getFloat64Value())
            != java.lang.Double.doubleToLongBits(
                other.getFloat64Value())) return false;
        break;
      case 7:
        if (!getStringValue()
            .equals(other.getStringValue())) return false;
        break;
      case 8:
        if (!getBytesValue()
            .equals(other.getBytesValue())) return false;
        break;
      case 10:
        if (!getTimeStampValue()
            .equals(other.getTimeStampValue())) return false;
        break;
      case 11:
        if (getNullValueValue()
            != other.getNullValueValue()) return false;
        break;
      case 0:
      default:
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    switch (dBTypeCase_) {
      case 1:
        hash = (37 * hash) + INT32VALUE_FIELD_NUMBER;
        hash = (53 * hash) + getInt32Value();
        break;
      case 2:
        hash = (37 * hash) + INT64VALUE_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getInt64Value());
        break;
      case 5:
        hash = (37 * hash) + FLOAT32VALUE_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getFloat32Value());
        break;
      case 6:
        hash = (37 * hash) + FLOAT64VALUE_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getFloat64Value()));
        break;
      case 7:
        hash = (37 * hash) + STRINGVALUE_FIELD_NUMBER;
        hash = (53 * hash) + getStringValue().hashCode();
        break;
      case 8:
        hash = (37 * hash) + BYTESVALUE_FIELD_NUMBER;
        hash = (53 * hash) + getBytesValue().hashCode();
        break;
      case 10:
        hash = (37 * hash) + TIMESTAMPVALUE_FIELD_NUMBER;
        hash = (53 * hash) + getTimeStampValue().hashCode();
        break;
      case 11:
        hash = (37 * hash) + NULLVALUE_FIELD_NUMBER;
        hash = (53 * hash) + getNullValueValue();
        break;
      case 0:
      default:
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static org.apache.flink.connector.jdbc.table.sink.api.DBValue parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.apache.flink.connector.jdbc.table.sink.api.DBValue parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.apache.flink.connector.jdbc.table.sink.api.DBValue parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.apache.flink.connector.jdbc.table.sink.api.DBValue parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.apache.flink.connector.jdbc.table.sink.api.DBValue parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.apache.flink.connector.jdbc.table.sink.api.DBValue parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.apache.flink.connector.jdbc.table.sink.api.DBValue parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static org.apache.flink.connector.jdbc.table.sink.api.DBValue parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static org.apache.flink.connector.jdbc.table.sink.api.DBValue parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static org.apache.flink.connector.jdbc.table.sink.api.DBValue parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static org.apache.flink.connector.jdbc.table.sink.api.DBValue parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static org.apache.flink.connector.jdbc.table.sink.api.DBValue parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(org.apache.flink.connector.jdbc.table.sink.api.DBValue prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code api.DBValue}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:api.DBValue)
      org.apache.flink.connector.jdbc.table.sink.api.DBValueOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.flink.connector.jdbc.table.sink.api.Adbpgss.internal_static_api_DBValue_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.flink.connector.jdbc.table.sink.api.Adbpgss.internal_static_api_DBValue_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.flink.connector.jdbc.table.sink.api.DBValue.class, org.apache.flink.connector.jdbc.table.sink.api.DBValue.Builder.class);
    }

    // Construct using org.apache.flink.connector.jdbc.table.sink.api.DBValue.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      if (timeStampValueBuilder_ != null) {
        timeStampValueBuilder_.clear();
      }
      dBTypeCase_ = 0;
      dBType_ = null;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return org.apache.flink.connector.jdbc.table.sink.api.Adbpgss.internal_static_api_DBValue_descriptor;
    }

    @java.lang.Override
    public org.apache.flink.connector.jdbc.table.sink.api.DBValue getDefaultInstanceForType() {
      return org.apache.flink.connector.jdbc.table.sink.api.DBValue.getDefaultInstance();
    }

    @java.lang.Override
    public org.apache.flink.connector.jdbc.table.sink.api.DBValue build() {
      org.apache.flink.connector.jdbc.table.sink.api.DBValue result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public org.apache.flink.connector.jdbc.table.sink.api.DBValue buildPartial() {
      org.apache.flink.connector.jdbc.table.sink.api.DBValue result = new org.apache.flink.connector.jdbc.table.sink.api.DBValue(this);
      if (bitField0_ != 0) { buildPartial0(result); }
      buildPartialOneofs(result);
      onBuilt();
      return result;
    }

    private void buildPartial0(org.apache.flink.connector.jdbc.table.sink.api.DBValue result) {
      int from_bitField0_ = bitField0_;
    }

    private void buildPartialOneofs(org.apache.flink.connector.jdbc.table.sink.api.DBValue result) {
      result.dBTypeCase_ = dBTypeCase_;
      result.dBType_ = this.dBType_;
      if (dBTypeCase_ == 10 &&
          timeStampValueBuilder_ != null) {
        result.dBType_ = timeStampValueBuilder_.build();
      }
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof org.apache.flink.connector.jdbc.table.sink.api.DBValue) {
        return mergeFrom((org.apache.flink.connector.jdbc.table.sink.api.DBValue)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(org.apache.flink.connector.jdbc.table.sink.api.DBValue other) {
      if (other == org.apache.flink.connector.jdbc.table.sink.api.DBValue.getDefaultInstance()) return this;
      switch (other.getDBTypeCase()) {
        case INT32VALUE: {
          setInt32Value(other.getInt32Value());
          break;
        }
        case INT64VALUE: {
          setInt64Value(other.getInt64Value());
          break;
        }
        case FLOAT32VALUE: {
          setFloat32Value(other.getFloat32Value());
          break;
        }
        case FLOAT64VALUE: {
          setFloat64Value(other.getFloat64Value());
          break;
        }
        case STRINGVALUE: {
          dBTypeCase_ = 7;
          dBType_ = other.dBType_;
          onChanged();
          break;
        }
        case BYTESVALUE: {
          setBytesValue(other.getBytesValue());
          break;
        }
        case TIMESTAMPVALUE: {
          mergeTimeStampValue(other.getTimeStampValue());
          break;
        }
        case NULLVALUE: {
          setNullValueValue(other.getNullValueValue());
          break;
        }
        case DBTYPE_NOT_SET: {
          break;
        }
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              dBType_ = input.readInt32();
              dBTypeCase_ = 1;
              break;
            } // case 8
            case 16: {
              dBType_ = input.readInt64();
              dBTypeCase_ = 2;
              break;
            } // case 16
            case 45: {
              dBType_ = input.readFloat();
              dBTypeCase_ = 5;
              break;
            } // case 45
            case 49: {
              dBType_ = input.readDouble();
              dBTypeCase_ = 6;
              break;
            } // case 49
            case 58: {
              java.lang.String s = input.readStringRequireUtf8();
              dBTypeCase_ = 7;
              dBType_ = s;
              break;
            } // case 58
            case 66: {
              dBType_ = input.readBytes();
              dBTypeCase_ = 8;
              break;
            } // case 66
            case 82: {
              input.readMessage(
                  getTimeStampValueFieldBuilder().getBuilder(),
                  extensionRegistry);
              dBTypeCase_ = 10;
              break;
            } // case 82
            case 88: {
              int rawValue = input.readEnum();
              dBTypeCase_ = 11;
              dBType_ = rawValue;
              break;
            } // case 88
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int dBTypeCase_ = 0;
    private java.lang.Object dBType_;
    public DBTypeCase
        getDBTypeCase() {
      return DBTypeCase.forNumber(
          dBTypeCase_);
    }

    public Builder clearDBType() {
      dBTypeCase_ = 0;
      dBType_ = null;
      onChanged();
      return this;
    }

    private int bitField0_;

    /**
     * <code>int32 Int32Value = 1;</code>
     * @return Whether the int32Value field is set.
     */
    public boolean hasInt32Value() {
      return dBTypeCase_ == 1;
    }
    /**
     * <code>int32 Int32Value = 1;</code>
     * @return The int32Value.
     */
    public int getInt32Value() {
      if (dBTypeCase_ == 1) {
        return (java.lang.Integer) dBType_;
      }
      return 0;
    }
    /**
     * <code>int32 Int32Value = 1;</code>
     * @param value The int32Value to set.
     * @return This builder for chaining.
     */
    public Builder setInt32Value(int value) {
      
      dBTypeCase_ = 1;
      dBType_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int32 Int32Value = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearInt32Value() {
      if (dBTypeCase_ == 1) {
        dBTypeCase_ = 0;
        dBType_ = null;
        onChanged();
      }
      return this;
    }

    /**
     * <code>int64 Int64Value = 2;</code>
     * @return Whether the int64Value field is set.
     */
    public boolean hasInt64Value() {
      return dBTypeCase_ == 2;
    }
    /**
     * <code>int64 Int64Value = 2;</code>
     * @return The int64Value.
     */
    public long getInt64Value() {
      if (dBTypeCase_ == 2) {
        return (java.lang.Long) dBType_;
      }
      return 0L;
    }
    /**
     * <code>int64 Int64Value = 2;</code>
     * @param value The int64Value to set.
     * @return This builder for chaining.
     */
    public Builder setInt64Value(long value) {
      
      dBTypeCase_ = 2;
      dBType_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int64 Int64Value = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearInt64Value() {
      if (dBTypeCase_ == 2) {
        dBTypeCase_ = 0;
        dBType_ = null;
        onChanged();
      }
      return this;
    }

    /**
     * <code>float Float32Value = 5;</code>
     * @return Whether the float32Value field is set.
     */
    public boolean hasFloat32Value() {
      return dBTypeCase_ == 5;
    }
    /**
     * <code>float Float32Value = 5;</code>
     * @return The float32Value.
     */
    public float getFloat32Value() {
      if (dBTypeCase_ == 5) {
        return (java.lang.Float) dBType_;
      }
      return 0F;
    }
    /**
     * <code>float Float32Value = 5;</code>
     * @param value The float32Value to set.
     * @return This builder for chaining.
     */
    public Builder setFloat32Value(float value) {
      
      dBTypeCase_ = 5;
      dBType_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>float Float32Value = 5;</code>
     * @return This builder for chaining.
     */
    public Builder clearFloat32Value() {
      if (dBTypeCase_ == 5) {
        dBTypeCase_ = 0;
        dBType_ = null;
        onChanged();
      }
      return this;
    }

    /**
     * <code>double Float64Value = 6;</code>
     * @return Whether the float64Value field is set.
     */
    public boolean hasFloat64Value() {
      return dBTypeCase_ == 6;
    }
    /**
     * <code>double Float64Value = 6;</code>
     * @return The float64Value.
     */
    public double getFloat64Value() {
      if (dBTypeCase_ == 6) {
        return (java.lang.Double) dBType_;
      }
      return 0D;
    }
    /**
     * <code>double Float64Value = 6;</code>
     * @param value The float64Value to set.
     * @return This builder for chaining.
     */
    public Builder setFloat64Value(double value) {
      
      dBTypeCase_ = 6;
      dBType_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>double Float64Value = 6;</code>
     * @return This builder for chaining.
     */
    public Builder clearFloat64Value() {
      if (dBTypeCase_ == 6) {
        dBTypeCase_ = 0;
        dBType_ = null;
        onChanged();
      }
      return this;
    }

    /**
     * <pre>
     * Includes types whose values are presented as string but are not a real string type in Greenplum; for example: macaddr, time with time zone, box, etc.
     * </pre>
     *
     * <code>string StringValue = 7;</code>
     * @return Whether the stringValue field is set.
     */
    @java.lang.Override
    public boolean hasStringValue() {
      return dBTypeCase_ == 7;
    }
    /**
     * <pre>
     * Includes types whose values are presented as string but are not a real string type in Greenplum; for example: macaddr, time with time zone, box, etc.
     * </pre>
     *
     * <code>string StringValue = 7;</code>
     * @return The stringValue.
     */
    @java.lang.Override
    public java.lang.String getStringValue() {
      java.lang.Object ref = "";
      if (dBTypeCase_ == 7) {
        ref = dBType_;
      }
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (dBTypeCase_ == 7) {
          dBType_ = s;
        }
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * Includes types whose values are presented as string but are not a real string type in Greenplum; for example: macaddr, time with time zone, box, etc.
     * </pre>
     *
     * <code>string StringValue = 7;</code>
     * @return The bytes for stringValue.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getStringValueBytes() {
      java.lang.Object ref = "";
      if (dBTypeCase_ == 7) {
        ref = dBType_;
      }
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        if (dBTypeCase_ == 7) {
          dBType_ = b;
        }
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Includes types whose values are presented as string but are not a real string type in Greenplum; for example: macaddr, time with time zone, box, etc.
     * </pre>
     *
     * <code>string StringValue = 7;</code>
     * @param value The stringValue to set.
     * @return This builder for chaining.
     */
    public Builder setStringValue(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      dBTypeCase_ = 7;
      dBType_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Includes types whose values are presented as string but are not a real string type in Greenplum; for example: macaddr, time with time zone, box, etc.
     * </pre>
     *
     * <code>string StringValue = 7;</code>
     * @return This builder for chaining.
     */
    public Builder clearStringValue() {
      if (dBTypeCase_ == 7) {
        dBTypeCase_ = 0;
        dBType_ = null;
        onChanged();
      }
      return this;
    }
    /**
     * <pre>
     * Includes types whose values are presented as string but are not a real string type in Greenplum; for example: macaddr, time with time zone, box, etc.
     * </pre>
     *
     * <code>string StringValue = 7;</code>
     * @param value The bytes for stringValue to set.
     * @return This builder for chaining.
     */
    public Builder setStringValueBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      dBTypeCase_ = 7;
      dBType_ = value;
      onChanged();
      return this;
    }

    /**
     * <code>bytes BytesValue = 8;</code>
     * @return Whether the bytesValue field is set.
     */
    public boolean hasBytesValue() {
      return dBTypeCase_ == 8;
    }
    /**
     * <code>bytes BytesValue = 8;</code>
     * @return The bytesValue.
     */
    public com.google.protobuf.ByteString getBytesValue() {
      if (dBTypeCase_ == 8) {
        return (com.google.protobuf.ByteString) dBType_;
      }
      return com.google.protobuf.ByteString.EMPTY;
    }
    /**
     * <code>bytes BytesValue = 8;</code>
     * @param value The bytesValue to set.
     * @return This builder for chaining.
     */
    public Builder setBytesValue(com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      dBTypeCase_ = 8;
      dBType_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>bytes BytesValue = 8;</code>
     * @return This builder for chaining.
     */
    public Builder clearBytesValue() {
      if (dBTypeCase_ == 8) {
        dBTypeCase_ = 0;
        dBType_ = null;
        onChanged();
      }
      return this;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Timestamp, com.google.protobuf.Timestamp.Builder, com.google.protobuf.TimestampOrBuilder> timeStampValueBuilder_;
    /**
     * <pre>
     * Time without timezone
     * </pre>
     *
     * <code>.google.protobuf.Timestamp TimeStampValue = 10;</code>
     * @return Whether the timeStampValue field is set.
     */
    @java.lang.Override
    public boolean hasTimeStampValue() {
      return dBTypeCase_ == 10;
    }
    /**
     * <pre>
     * Time without timezone
     * </pre>
     *
     * <code>.google.protobuf.Timestamp TimeStampValue = 10;</code>
     * @return The timeStampValue.
     */
    @java.lang.Override
    public com.google.protobuf.Timestamp getTimeStampValue() {
      if (timeStampValueBuilder_ == null) {
        if (dBTypeCase_ == 10) {
          return (com.google.protobuf.Timestamp) dBType_;
        }
        return com.google.protobuf.Timestamp.getDefaultInstance();
      } else {
        if (dBTypeCase_ == 10) {
          return timeStampValueBuilder_.getMessage();
        }
        return com.google.protobuf.Timestamp.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Time without timezone
     * </pre>
     *
     * <code>.google.protobuf.Timestamp TimeStampValue = 10;</code>
     */
    public Builder setTimeStampValue(com.google.protobuf.Timestamp value) {
      if (timeStampValueBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        dBType_ = value;
        onChanged();
      } else {
        timeStampValueBuilder_.setMessage(value);
      }
      dBTypeCase_ = 10;
      return this;
    }
    /**
     * <pre>
     * Time without timezone
     * </pre>
     *
     * <code>.google.protobuf.Timestamp TimeStampValue = 10;</code>
     */
    public Builder setTimeStampValue(
        com.google.protobuf.Timestamp.Builder builderForValue) {
      if (timeStampValueBuilder_ == null) {
        dBType_ = builderForValue.build();
        onChanged();
      } else {
        timeStampValueBuilder_.setMessage(builderForValue.build());
      }
      dBTypeCase_ = 10;
      return this;
    }
    /**
     * <pre>
     * Time without timezone
     * </pre>
     *
     * <code>.google.protobuf.Timestamp TimeStampValue = 10;</code>
     */
    public Builder mergeTimeStampValue(com.google.protobuf.Timestamp value) {
      if (timeStampValueBuilder_ == null) {
        if (dBTypeCase_ == 10 &&
            dBType_ != com.google.protobuf.Timestamp.getDefaultInstance()) {
          dBType_ = com.google.protobuf.Timestamp.newBuilder((com.google.protobuf.Timestamp) dBType_)
              .mergeFrom(value).buildPartial();
        } else {
          dBType_ = value;
        }
        onChanged();
      } else {
        if (dBTypeCase_ == 10) {
          timeStampValueBuilder_.mergeFrom(value);
        } else {
          timeStampValueBuilder_.setMessage(value);
        }
      }
      dBTypeCase_ = 10;
      return this;
    }
    /**
     * <pre>
     * Time without timezone
     * </pre>
     *
     * <code>.google.protobuf.Timestamp TimeStampValue = 10;</code>
     */
    public Builder clearTimeStampValue() {
      if (timeStampValueBuilder_ == null) {
        if (dBTypeCase_ == 10) {
          dBTypeCase_ = 0;
          dBType_ = null;
          onChanged();
        }
      } else {
        if (dBTypeCase_ == 10) {
          dBTypeCase_ = 0;
          dBType_ = null;
        }
        timeStampValueBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Time without timezone
     * </pre>
     *
     * <code>.google.protobuf.Timestamp TimeStampValue = 10;</code>
     */
    public com.google.protobuf.Timestamp.Builder getTimeStampValueBuilder() {
      return getTimeStampValueFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Time without timezone
     * </pre>
     *
     * <code>.google.protobuf.Timestamp TimeStampValue = 10;</code>
     */
    @java.lang.Override
    public com.google.protobuf.TimestampOrBuilder getTimeStampValueOrBuilder() {
      if ((dBTypeCase_ == 10) && (timeStampValueBuilder_ != null)) {
        return timeStampValueBuilder_.getMessageOrBuilder();
      } else {
        if (dBTypeCase_ == 10) {
          return (com.google.protobuf.Timestamp) dBType_;
        }
        return com.google.protobuf.Timestamp.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Time without timezone
     * </pre>
     *
     * <code>.google.protobuf.Timestamp TimeStampValue = 10;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Timestamp, com.google.protobuf.Timestamp.Builder, com.google.protobuf.TimestampOrBuilder> 
        getTimeStampValueFieldBuilder() {
      if (timeStampValueBuilder_ == null) {
        if (!(dBTypeCase_ == 10)) {
          dBType_ = com.google.protobuf.Timestamp.getDefaultInstance();
        }
        timeStampValueBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.Timestamp, com.google.protobuf.Timestamp.Builder, com.google.protobuf.TimestampOrBuilder>(
                (com.google.protobuf.Timestamp) dBType_,
                getParentForChildren(),
                isClean());
        dBType_ = null;
      }
      dBTypeCase_ = 10;
      onChanged();
      return timeStampValueBuilder_;
    }

    /**
     * <code>.google.protobuf.NullValue NullValue = 11;</code>
     * @return Whether the nullValue field is set.
     */
    @java.lang.Override
    public boolean hasNullValue() {
      return dBTypeCase_ == 11;
    }
    /**
     * <code>.google.protobuf.NullValue NullValue = 11;</code>
     * @return The enum numeric value on the wire for nullValue.
     */
    @java.lang.Override
    public int getNullValueValue() {
      if (dBTypeCase_ == 11) {
        return ((java.lang.Integer) dBType_).intValue();
      }
      return 0;
    }
    /**
     * <code>.google.protobuf.NullValue NullValue = 11;</code>
     * @param value The enum numeric value on the wire for nullValue to set.
     * @return This builder for chaining.
     */
    public Builder setNullValueValue(int value) {
      dBTypeCase_ = 11;
      dBType_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>.google.protobuf.NullValue NullValue = 11;</code>
     * @return The nullValue.
     */
    @java.lang.Override
    public com.google.protobuf.NullValue getNullValue() {
      if (dBTypeCase_ == 11) {
        com.google.protobuf.NullValue result = com.google.protobuf.NullValue.forNumber(
            (java.lang.Integer) dBType_);
        return result == null ? com.google.protobuf.NullValue.UNRECOGNIZED : result;
      }
      return com.google.protobuf.NullValue.NULL_VALUE;
    }
    /**
     * <code>.google.protobuf.NullValue NullValue = 11;</code>
     * @param value The nullValue to set.
     * @return This builder for chaining.
     */
    public Builder setNullValue(com.google.protobuf.NullValue value) {
      if (value == null) {
        throw new NullPointerException();
      }
      dBTypeCase_ = 11;
      dBType_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <code>.google.protobuf.NullValue NullValue = 11;</code>
     * @return This builder for chaining.
     */
    public Builder clearNullValue() {
      if (dBTypeCase_ == 11) {
        dBTypeCase_ = 0;
        dBType_ = null;
        onChanged();
      }
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:api.DBValue)
  }

  // @@protoc_insertion_point(class_scope:api.DBValue)
  private static final org.apache.flink.connector.jdbc.table.sink.api.DBValue DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new org.apache.flink.connector.jdbc.table.sink.api.DBValue();
  }

  public static org.apache.flink.connector.jdbc.table.sink.api.DBValue getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<DBValue>
      PARSER = new com.google.protobuf.AbstractParser<DBValue>() {
    @java.lang.Override
    public DBValue parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<DBValue> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<DBValue> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public org.apache.flink.connector.jdbc.table.sink.api.DBValue getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

